<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Content</title>
		<!-- css style sheets -->
		<link rel="stylesheet" href="../css/loginsignupForm.css" />
		<link rel="stylesheet" href="../css/navbar.css" />
		<link rel="stylesheet" href="../css/styles.css" />
		<link rel="stylesheet" href="../css/button.css" />
		<link rel="stylesheet" href="../css/content.css" />
		<!--google fonds -->

		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap"
			rel="stylesheet"
		/>

		<link
			href="https://fonts.googleapis.com/css2?family=VT323&display=swap"
			rel="stylesheet"
		/>

		<!-- bootsrap  -->
		<link
			href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
			rel="stylesheet"
			integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
			crossorigin="anonymous"
		/>
		<script
			src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
			integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
			crossorigin="anonymous"
		></script>

		<style>
			.navbar.navbar-expand-lg.border-bottom.border-body {
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				z-index: 20;
			}

			.theme-container {
				position: relative; /* Position relative to the nearest positioned ancestor */
				top: 30px; /* Adjust as needed */
				right: 30px; /* Adjust as needed */
				padding: 10px; /* Example padding */
				display: inline-block;
			}

			.main {
				padding-top: 150px;
				display: flex;
				justify-content: center;
				align-items: center;
				flex-wrap: wrap;
				position: fixed; /* or absolute */
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				overflow: auto;
				background-color: var(--background-color);
			}

			.resource-usage-form {
				display: flex;
				align-items: center;
				justify-content: center;
				margin-top: 20px;
				flex-direction: column;
			}

			#resourceUsageContainer {
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 20px;
			}

			@media (max-width: 768px) {
				#resourceUsageContainer {
					grid-template-columns: 1fr;
				}
			}
		</style>
	</head>

	<body>
		<nav
			class="navbar navbar-expand-lg border-bottom border-body"
			data-bs-theme="dark"
		>
			<div class="container-fluid">
				<a class="navbar-brand" href="/content">
					<img src="/images/logo-nobg	.png" alt="Logo" height="30" />
				</a>
				<button
					class="navbar-toggler"
					type="button"
					data-bs-toggle="collapse"
					data-bs-target="#navbarColor01"
					aria-controls="navbarColor01"
					aria-expanded="false"
					aria-label="Toggle navigation"
				>
					<span class="navbar-toggler-icon" id="drop_down"></span>
				</button>
				<div class="collapse navbar-collapse" id="navbarColor01">
					<ul class="navbar-nav ms-auto">
						<!-- Only "Home" link remains -->
						<li class="nav-item">
							<a class="nav-link" href="/content">Home</a>
						</li>
					</ul>
					<div class="theme_container">
						<label class="switch" id="dark-mode">
							<span class="sun"
								><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
									<g fill="#ffd43b">
										<circle r="5" cy="12" cx="12"></circle>
										<path
											d="m21 13h-1a1 1 0 0 1 0-2h1a1 1 0 0 1 0 2zm-17 0h-1a1 1 0 0 1 0-2h1a1 1 0 0 1 0 2zm13.66-5.66a1 1 0 0 1 -.66-.29 1 1 0 0 1 0-1.41l.71-.71a1 1 0 1 1 1.41 1.41l-.71.71a1 1 0 0 1 -.75.29zm-12.02 12.02a1 1 0 0 1 -.71-.29 1 1 0 0 1 0-1.41l.71-.66a1 1 0 0 1 1.41 1.41l-.71.71a1 1 0 0 1 -.7.24zm6.36-14.36a1 1 0 0 1 -1-1v-1a1 1 0 0 1 2 0v1a1 1 0 0 1 -1 1zm0 17a1 1 0 0 1 -1-1v-1a1 1 0 0 1 2 0v1a1 1 0 0 1 -1 1zm-5.66-14.66a1 1 0 0 1 -.7-.29l-.71-.71a1 1 0 0 1 1.41-1.41l.71.71a1 1 0 0 1 0 1.41 1 1 0 0 1 -.71.29zm12.02 12.02a1 1 0 0 1 -.7-.29l-.66-.71a1 1 0 0 1 1.36-1.36l.71.71a1 1 0 0 1 0 1.41 1 1 0 0 1 -.71.24z"
										></path>
									</g></svg
							></span>
							<span class="moon"
								><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
									<path
										d="m223.5 32c-123.5 0-223.5 100.3-223.5 224s100 224 223.5 224c60.6 0 115.5-24.2 155.8-63.4 5-4.9 6.3-12.5 3.1-18.7s-10.1-9.7-17-8.5c-9.8 1.7-19.8 2.6-30.1 2.6-96.9 0-175.5-78.8-175.5-176 0-65.8 36-123.1 89.3-153.3 6.1-3.5 9.2-10.5 7.7-17.3s-7.3-11.9-14.3-12.5c-6.3-.5-12.6-.8-19-.8z"
									></path></svg
							></span>
							<input type="checkbox" class="input" id="dark-mode-checkbox" />
							<span class="slider"></span>
						</label>
					</div>
				</div>
			</div>
		</nav>

		<div class="main">
			<!-- <form id="growCropForm" class="form" action="/grow-crop" method="post"> -->
			<form id="growCropForm" class="form">
				<div class="title noto-sans-title">
					<span id="formTitle">Grow a Crop</span>
				</div>

				<!-- Crop Name -->
				<div class="title noto-sans-title">
					<label for="cropName">Crop Name:</label>
					<select
						id="cropName"
						name="cropName"
						class="input noto-sans-title"
						required
					>
						<!-- JavaScript will populate this dropdown -->
					</select>
				</div>

				<!-- Estimated Time of Growth -->
				<div class="title noto-sans-title">
					<label for="estimatedTimeOfGrowth">Estimated Time of Growth:</label>
					<input
						type="date"
						id="estimatedTimeOfGrowth"
						name="estimatedTimeOfGrowth"
						class="input noto-sans-title"
						required
					/>
				</div>

				<!-- Resource Usage -->
				<div class="title noto-sans-title">
					<label>Resource Usage:</label>
					<!-- Dynamically add resource usage forms using JavaScript -->
					<button
						type="button"
						id="addResourceUsage"
						class="button-confirm noto-sans-title"
					>
						Add
					</button>
					<button
						type="button"
						id="removeResourceUsage"
						class="button-confirm noto-sans-title"
					>
						Remove
					</button>
				</div>
				<div id="resourceUsageContainer">
					<!-- Resource Usage forms will be added here -->
				</div>

				<!-- Start Date (hidden, set automatically on form submission) -->
				<input type="hidden" id="startDate" name="startDate" />

				<!-- End Date (hidden, set automatically on form submission) -->
				<input type="hidden" id="endDate" name="endDate" />

				<!-- Submit Button -->
				<button type="submit" class="button-confirm noto-sans-title">
					Submit
				</button>
			</form>
		</div>

		<script>
			const darkModeCheckbox = document.getElementById("dark-mode-checkbox");

			darkModeCheckbox.addEventListener("change", function () {
				if (this.checked) {
					document.body.classList.add("dark-mode");
				} else {
					document.body.classList.remove("dark-mode");
				}
			});

			// Include your existing JavaScript code here

			// Add logic to dynamically add resource usage forms
			const resourceUsageContainer = document.getElementById(
				"resourceUsageContainer"
			);
			const addResourceUsageButton =
				document.getElementById("addResourceUsage");

			addResourceUsageButton.addEventListener("click", async () => {
				const resourceUsageForm = document.createElement("div");
				resourceUsageForm.innerHTML = `
                <label for="category">Category:</label>
                <select id="category" name="category" class="input noto-sans-title" required>
                    <option value="" selected>Select Category</option>
                    <!-- Options will be dynamically populated -->
                </select>

                <label for="itemName">Item Name:</label>
                <select id="itemName" name="itemName" class="input noto-sans-title" required disabled>
                    <option value="">Select Item</option>
                    <!-- Options will be dynamically populated based on the selected category -->
                </select>
                
                <label for="amountUsed">Amount Used:</label>
                <input type="number" id="amountUsed" name="amountUsed" class="input noto-sans-title" required>

                <label for="frequency">Frequency of Usage (days):</label>
                <input type="number" id="frequency" name="frequency" class="input noto-sans-title" required>
            `;
				resourceUsageForm.classList.add("resource-usage-form");
				resourceUsageContainer.appendChild(resourceUsageForm);

				// Fetch and populate categories in the dropdown
				const categoryDropdown = resourceUsageForm.querySelector("#category");
				const itemNameDropdown = resourceUsageForm.querySelector("#itemName");

				try {
					const response = await fetch("/api/inventory/categories"); // Adjust the endpoint based on your API
					if (!response.ok) {
						throw new Error(`HTTP error! Status: ${response.status}`);
					}

					const responseJson = await response.json();
					const categories = responseJson.categories;
					console.log(categories);
					categories.forEach((category) => {
						const option = document.createElement("option");
						option.value = category;
						option.textContent = capitalizeFirstLetter(category);
						categoryDropdown.add(option);
					});

					// Event listener for category dropdown change
					categoryDropdown.addEventListener("change", async () => {
						const selectedCategory = categoryDropdown.value;

						if (selectedCategory) {
							itemNameDropdown.innerHTML =
								'<option value="">Select Item</option>';
							itemNameDropdown.disabled = true;

							if (selectedCategory !== "seeds") {
								try {
									const itemsResponse = await fetch(
										`/api/items?category=${selectedCategory}`
									);
									if (!itemsResponse.ok) {
										throw new Error(
											`HTTP error! Status: ${itemsResponse.status}`
										);
									}

									const itemsTemp = await itemsResponse.json();
									const items = itemsTemp.itemNames;
									console.log(items);
									// Populate the item name dropdown
									items.forEach((item) => {
										const option = document.createElement("option");
										option.value = item;
										option.textContent = item;
										itemNameDropdown.appendChild(option);
									});

									itemNameDropdown.disabled = false;
								} catch (error) {
									console.error("Error fetching and populating items:", error);
								}
							}
						}
					});
				} catch (error) {
					console.error("Error fetching and populating categories:", error);
				}
			});

			const removeResourceUsageButton = document.getElementById(
				"removeResourceUsage"
			);

			removeResourceUsageButton.addEventListener("click", () => {
				const resourceUsageForms = resourceUsageContainer.children;

				// Check if there's at least one form to remove
				if (resourceUsageForms.length > 0) {
					// Remove the last resource usage form
					resourceUsageContainer.removeChild(
						resourceUsageForms[resourceUsageForms.length - 1]
					);
				}
			});

			const growCropForm = document.getElementById("growCropForm");

			growCropForm.addEventListener("submit", async (event) => {
				event.preventDefault();

				// Collect data from the form
				const cropName = document.getElementById("cropName").value;
				const estimatedTimeOfGrowthInput = document.getElementById(
					"estimatedTimeOfGrowth"
				);
				let estimatedTimeOfGrowth = estimatedTimeOfGrowthInput.value;

				// Calculate the number of days from the current date to the given date
				const currentDate = new Date();
				const endDate = new Date(estimatedTimeOfGrowth);
				const timeDifference = endDate.getTime() - currentDate.getTime();
				const daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));

				// Log the calculated number of days
				console.log("Number of days to growth:", daysDifference);
				estimatedTimeOfGrowth = daysDifference;

				// Collect resource usage data
				const resourceUsageForms = document.querySelectorAll(
					"#resourceUsageContainer > div"
				);
				const resourceUsageData = Array.from(resourceUsageForms).map((form) => {
					const category = form.querySelector("#category").value;
					const itemName = form.querySelector("#itemName").value;
					const amountUsed = form.querySelector("#amountUsed").value;
					const frequency = form.querySelector("#frequency").value;

					return { category, itemName, amountUsed, frequency };
				});

				// Create the JSON object
				const formData = {
					cropName,
					estimatedTimeOfGrowth,
					resourceUsageData,
				};

				try {
					// Make a POST request to the server
					const response = await fetch("/grow-crop", {
						method: "POST",
						headers: {
							"Content-Type": "application/json",
						},
						body: JSON.stringify(formData),
					});

					if (!response.ok) {
						throw new Error(`HTTP error! Status: ${response.status}`);
					}

					// Optionally, handle the server response if needed
					const responseData = await response.json();
					console.log("Server response:", responseData);

					// Redirect or perform other actions based on the server response
				} catch (error) {
					console.error("Error making POST request:", error);
				}
			});

			const seedNameDropdown = document.getElementById("cropName"); // Correct variable name

			async function fetchAndPopulateSeedNames() {
				try {
					// Adjust the endpoint based on your API
					const response = await fetch("/api/seeds");

					if (!response.ok) {
						throw new Error(`HTTP error! Status: ${response.status}`);
					}

					const data = await response.json();

					// Log fetched data
					console.log("Fetched Seed Data:", data);

					// Clear existing options
					seedNameDropdown.innerHTML = '<option value="">Select Seed</option>';

					// Populate dropdown with fetched seed names
					data.seedNames.forEach((seedName) => {
						const option = document.createElement("option");
						option.value = seedName;
						option.textContent = seedName;
						seedNameDropdown.appendChild(option);
					});
				} catch (error) {
					console.error("Error fetching and populating seed names:", error);
				}
			}

			// Call the function initially and whenever the category changes
			fetchAndPopulateSeedNames();

			// Function to capitalize the first letter of a string
			function capitalizeFirstLetter(string) {
				return string.charAt(0).toUpperCase() + string.slice(1);
			}
		</script>
	</body>
</html>
