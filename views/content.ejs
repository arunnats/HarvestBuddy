<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Content</title>
		<link rel="stylesheet" href="../css/loginsignupForm.css" />
		<link rel="stylesheet" href="../css/button.css" />
		<link rel="stylesheet" href="../css/content.css" />
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap"
			rel="stylesheet"
		/>
		<style>
			.main {
				display: flex;
				justify-content: center;
				align-items: center;
				flex-direction: column;
			}
		</style>
	</head>
	<body>
		<div class="main">
			<div class="info-divs">
				<div class="card">
					<div class="card-content-wrapper">
						<div class="card-title">Welcome <%= name %></div>
						<div class="card-price">
							<span>Updates on <%= farmName %> at <%= location %></span>
						</div>
						<div class="card-subtitle">
							<span>Elevation: <%= elevation %> m</span>
							<br />
							<span>Humidity: <%= humidity %>%</span>
							<br />
							<span>Rain: <%= rain %> mm</span>
							<br />
							<span>Wind Speed: <%= windSpeed %> km/h</span>
							<br />
							<span>UV Index Max: <%= uvIndexMax %></span>
						</div>
					</div>
				</div>

				<div class="card">
					<div class="card-content-wrapper">
						<div class="card-title">Manage Inventory</div>
					</div>
					<button class="card-btn">More info</button>
				</div>

				<div class="card">
					<div class="card-content-wrapper">
						<div class="card-title">Grow Crop</div>
					</div>
					<button class="card-btn">More info</button>
				</div>
			</div>
			<div class="crop-info">
				<% cropsGrown.forEach(crop => { %>
						<div class="crop-details">
								<h2>Crop: <%= crop.cropName %></h2>
								<p>Start Date: <%= crop.startDate %></p>
								<p>End Date: <%= crop.endDate %></p>
								<p>Estimated Time of Growth: <%= crop.estimatedTimeOfGrowth %> days</p>
								<p>Days Passed: <%= calculateDaysPassed(crop.startDate) %></p>
								<p>Days Remaining: <%= calculateDaysRemaining(crop.endDate) %></p>
		
								<!-- Iterate over resourceUsage for each crop -->
								<% crop.resourceUsage.forEach(resource => { %>
										<p>
												<%= resource.itemName %>:
												<%= calculateItemsUsed(resource.amountUsed, resource.frequency, crop.startDate, crop.endDate) %>
												/ <%= resource.amountUsed * calculateTotalUsageFrequency(crop.startDate, crop.endDate, resource.frequency) %>
										</p>
								<% }) %>
		
								<button onclick="recommendedAction('<%= crop.cropName %>')">Recommended Action</button>
						</div>
				<% }) %>
		</div>
			</div>
		</div>
		<script>
			function redirectTo(url) {
					window.location.href = url;
			}
	
			function calculateDaysPassed(startDate) {
					const startTimestamp = new Date(startDate).getTime();
					const currentTimestamp = new Date().getTime();
					const millisecondsPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds in a day
					const daysPassed = Math.floor((currentTimestamp - startTimestamp) / millisecondsPerDay);
					return daysPassed;
			}
	
			function calculateDaysRemaining(endDate) {
					const endTimestamp = new Date(endDate).getTime();
					const currentTimestamp = new Date().getTime();
					const millisecondsPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds in a day
					const daysRemaining = Math.max(0, Math.ceil((endTimestamp - currentTimestamp) / millisecondsPerDay));
					return daysRemaining;
			}
	
			function calculateItemsUsed(amountUsed, frequency, startDate, endDate) {
					const daysPassed = calculateDaysPassed(startDate);
					const totalUsageFrequency = calculateTotalUsageFrequency(startDate, endDate, frequency);
					const itemsUsed = amountUsed * daysPassed / totalUsageFrequency;
					return itemsUsed.toFixed(2); // Adjust the precision as needed
			}
	
			function calculateTotalUsageFrequency(startDate, endDate, frequency) {
					const totalDays = calculateDaysRemaining(endDate) + calculateDaysPassed(startDate);
					const totalUsageFrequency = totalDays / frequency;
					return totalUsageFrequency;
			}
	
			// Call the functions after they have been defined
			<% cropsGrown.forEach(crop => { %>
					calculateDaysPassed('<%= crop.startDate %>');
					calculateDaysRemaining('<%= crop.endDate %>');
					<% crop.resourceUsage.forEach(resource => { %>
							calculateItemsUsed(<%= resource.amountUsed %>, <%= resource.frequency %>, '<%= crop.startDate %>', '<%= crop.endDate %>');
					<% }) %>
			<% }) %>
	</script>
	
	</body>
</html>
