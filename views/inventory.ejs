<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>inventory</title>
		<!-- css style sheets -->
		<link rel="stylesheet" href="../css/loginsignupForm.css" />
		<link rel="stylesheet" href="../css/navbar.css" />
		<link rel="stylesheet" href="../css/styles.css" />
		<link rel="stylesheet" href="../css/button.css" />
		<link rel="stylesheet" href="../css/inventory.css" />

		<!--google fonds -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap"
			rel="stylesheet"
		/>

		<link
			href="https://fonts.googleapis.com/css2?family=VT323&display=swap"
			rel="stylesheet"
		/>

		<!-- bootsrap  -->
		<link
			href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
			rel="stylesheet"
			integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
			crossorigin="anonymous"
		/>
		<script
			src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
			integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
			crossorigin="anonymous"
		></script>
	</head>
	<body>
		<nav
			class="navbar navbar-expand-lg border-bottom border-body"
			data-bs-theme="dark"
		>
			<div class="container-fluid">
				<a class="navbar-brand" href="/content">
					<img src="/images/logo-nobg	.png" alt="Logo" height="30" />
				</a>
				<button
					class="navbar-toggler"
					type="button"
					data-bs-toggle="collapse"
					data-bs-target="#navbarColor01"
					aria-controls="navbarColor01"
					aria-expanded="false"
					aria-label="Toggle navigation"
				>
					<span class="navbar-toggler-icon" id="drop_down"></span>
				</button>
				<div class="collapse navbar-collapse" id="navbarColor01">
					<ul class="navbar-nav ms-auto">
						<!-- Only "Home" link remains -->
						<li class="nav-item">
							<a class="nav-link" href="/content">Home</a>
						</li>
					</ul>
					<div class="theme_container">
						<label class="switch" id="dark-mode">
							<span class="sun"
								><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
									<g fill="#ffd43b">
										<circle r="5" cy="12" cx="12"></circle>
										<path
											d="m21 13h-1a1 1 0 0 1 0-2h1a1 1 0 0 1 0 2zm-17 0h-1a1 1 0 0 1 0-2h1a1 1 0 0 1 0 2zm13.66-5.66a1 1 0 0 1 -.66-.29 1 1 0 0 1 0-1.41l.71-.71a1 1 0 1 1 1.41 1.41l-.71.71a1 1 0 0 1 -.75.29zm-12.02 12.02a1 1 0 0 1 -.71-.29 1 1 0 0 1 0-1.41l.71-.66a1 1 0 0 1 1.41 1.41l-.71.71a1 1 0 0 1 -.7.24zm6.36-14.36a1 1 0 0 1 -1-1v-1a1 1 0 0 1 2 0v1a1 1 0 0 1 -1 1zm0 17a1 1 0 0 1 -1-1v-1a1 1 0 0 1 2 0v1a1 1 0 0 1 -1 1zm-5.66-14.66a1 1 0 0 1 -.7-.29l-.71-.71a1 1 0 0 1 1.41-1.41l.71.71a1 1 0 0 1 0 1.41 1 1 0 0 1 -.71.29zm12.02 12.02a1 1 0 0 1 -.7-.29l-.66-.71a1 1 0 0 1 1.36-1.36l.71.71a1 1 0 0 1 0 1.41 1 1 0 0 1 -.71.24z"
										></path>
									</g></svg
							></span>
							<span class="moon"
								><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
									<path
										d="m223.5 32c-123.5 0-223.5 100.3-223.5 224s100 224 223.5 224c60.6 0 115.5-24.2 155.8-63.4 5-4.9 6.3-12.5 3.1-18.7s-10.1-9.7-17-8.5c-9.8 1.7-19.8 2.6-30.1 2.6-96.9 0-175.5-78.8-175.5-176 0-65.8 36-123.1 89.3-153.3 6.1-3.5 9.2-10.5 7.7-17.3s-7.3-11.9-14.3-12.5c-6.3-.5-12.6-.8-19-.8z"
									></path></svg
							></span>
							<input type="checkbox" class="input" id="dark-mode-checkbox" />
							<span class="slider"></span>
						</label>
					</div>
				</div>
			</div>
		</nav>

		<div class="main_container">
			<div class="radio-wrapper" id="categorySelector">
				<div class="radio-option">
					<input
						class="radio-input"
						type="radio"
						name="category"
						value="fuel"
						checked
					/>
					<div class="radio-btn">
						<span class="radio-span">Fuel</span>
					</div>
				</div>
				<div class="radio-option">
					<input
						class="radio-input"
						type="radio"
						name="category"
						value="seeds"
					/>
					<div class="radio-btn">
						<span class="radio-span">Seeds</span>
					</div>
				</div>
				<div class="radio-option">
					<input
						class="radio-input"
						type="radio"
						name="category"
						value="fertilizer"
					/>
					<div class="radio-btn">
						<span class="radio-span">Fertilizer</span>
					</div>
				</div>
				<div class="radio-option">
					<input
						class="radio-input"
						type="radio"
						name="category"
						value="pesticide"
					/>
					<div class="radio-btn">
						<span class="radio-span">Pesticide</span>
					</div>
				</div>
				<div class="radio-option">
					<input
						class="radio-input"
						type="radio"
						name="category"
						value="tool"
					/>
					<div class="radio-btn">
						<span class="radio-span">Tool</span>
					</div>
				</div>
			</div>

			<form id="addUpdateForm" class="form" action="/inventory" method="post">
				<div class="title noto-sans-title">
					<span id="formTitle">Create an Item</span>
				</div>

				<div class="title">
					<span>Operation:</span>
					<div class="radio-wrapper" style="max-width: 350px">
						<div class="radio-option">
							<input
								class="radio-input"
								type="radio"
								name="operation"
								value="new"
								checked=""
							/>
							<div class="radio-btn">
								<span class="radio-span">New</span>
							</div>
						</div>
						<div class="radio-option">
							<input
								class="radio-input"
								type="radio"
								name="operation"
								value="add"
							/>
							<div class="radio-btn">
								<span class="radio-span">Add</span>
							</div>
						</div>
						<div class="radio-option">
							<input
								class="radio-input"
								type="radio"
								name="operation"
								value="subtract"
							/>
							<div class="radio-btn">
								<span class="radio-span">Subtract</span>
							</div>
						</div>
					</div>
				</div>

				<div id="newOperationFields">
					<input
						type="text"
						placeholder="New Item Name"
						name="newItemName"
						class="input noto-sans-title"
					/>
					<input
						type="text"
						placeholder="Initial Quantity"
						name="initialQuantity"
						class="input noto-sans-title"
					/>
				</div>

				<div id="addRemoveOperationFields">
					<select name="existingItemName" class="input noto-sans-title">
						<!-- Options will be dynamically populated here -->
					</select>
					<input
						type="text"
						placeholder="Quantity"
						name="modifyQuantity"
						class="input noto-sans-title"
					/>
				</div>

				<button type="submit" class="button-confirm noto-sans-title">
					Submit
				</button>
			</form>
			<br />

			<div class="form">
				<h2>Current Resources</h2>
				<% Object.keys(user.inventory).forEach(category => { %>
				<h3><%= category.charAt(0).toUpperCase() + category.slice(1) %></h3>
				<% user.inventory[category].forEach(item => { %>
				<p>Name: <%= item.name %>, Quantity: <%= item.quantity %></p>
				<% }); %> <% }); %>
			</div>
		</div>

		<footer
			class="d-flex flex-wrap justify-content-between align-items-center py-3 border-top"
			id="footer"
		>
			<div class="col-md-4 d-flex align-items-center">
				<a
					href="/"
					class="mb-3 me-2 mb-md-0 text-muted text-decoration-none lh-1"
				>
					<svg class="bi" width="30" height="24">
						<use xlink:href="#bootstrap"></use>
					</svg>
				</a>
				<span class="mb-3 mb-md-0" id="footer_text">Â© 2022 Company, Inc</span>
			</div>

			<ul class="nav col-md-4 justify-content-end list-unstyled d-flex">
				<li class="ms-3">
					<a class="text-muted" href="#"
						><svg class="bi" width="24" height="24">
							<use xlink:href="#twitter"></use></svg
					></a>
				</li>
				<li class="ms-3">
					<a class="text-muted" href="#"
						><svg class="bi" width="24" height="24">
							<use xlink:href="#instagram"></use></svg
					></a>
				</li>
				<li class="ms-3">
					<a class="text-muted" href="#"
						><svg class="bi" width="24" height="24">
							<use xlink:href="#facebook"></use></svg
					></a>
				</li>
			</ul>
		</footer>

		<script>
			const darkModeCheckbox = document.getElementById("dark-mode-checkbox");

			darkModeCheckbox.addEventListener("change", function () {
				if (this.checked) {
					document.body.classList.add("dark-mode");
				} else {
					document.body.classList.remove("dark-mode");
				}
			});

			const categorySelector = document.getElementById("categorySelector");
			const addUpdateForm = document.getElementById("addUpdateForm");
			const formTitle = document.getElementById("formTitle");
			const newOperationFields = document.getElementById("newOperationFields");
			const addRemoveOperationFields = document.getElementById(
				"addRemoveOperationFields"
			);
			const existingItemNameDropdown = document.querySelector(
				'select[name="existingItemName"]'
			);

			//console.log("test");
			//console.log("existingItemNameDropdown");

			// Initially hide the input fields
			// newOperationFields.style.display = "none";
			addRemoveOperationFields.style.display = "none";

			categorySelector.addEventListener("change", (event) => {
				const selectedCategory = event.target.value;
				formTitle.textContent = `Create ${
					selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1)
				} Item`;
			});

			addUpdateForm.addEventListener("submit", async (event) => {
				event.preventDefault();

				// Check if the form is valid (add validation logic if needed)
				const isValid = validateForm();
				if (!isValid) {
					return;
				}

				// Fetch and populate existing item names in the dropdown
				if (!existingItemNameDropdown.options.length) {
					await fetchAndPopulateItemNames();
				}

				// Collect form data
				const formData = {
					category: categorySelector.querySelector(
						'input[name="category"]:checked'
					).value,
					operation: document.querySelector('input[name="operation"]:checked')
						.value,
					newItemName: document.querySelector('input[name="newItemName"]')
						.value,
					initialQuantity: document.querySelector(
						'input[name="initialQuantity"]'
					).value,
					existingItemName: existingItemNameDropdown.selectedOptions[0].value,
					modifyQuantity: document.querySelector('input[name="modifyQuantity"]')
						.value,
				};

				// Log the selected item name and other form data
				console.log("Selected item name:", formData.existingItemName);
				console.log("Form data:", formData);

				// Add your logic to handle form submission via Fetch API
				await submitForm(formData);

				// Clear the form fields after submission
				addUpdateForm.reset();
			});

			// Function to handle form submission via Fetch API
			async function submitForm(formData) {
				try {
					// Log the JSON data before sending
					console.log("JSON Data to be Sent:", JSON.stringify(formData));

					const response = await fetch("/inventory", {
						method: "POST",
						headers: {
							"Content-Type": "application/json",
						},
						body: JSON.stringify(formData),
					});

					if (!response.ok) {
						throw new Error(`HTTP error! Status: ${response.status}`);
					}

					const responseData = await response.json();
					console.log("Server Response:", responseData);
					location.reload();
				} catch (error) {
					console.error("Error submitting form:", error);
				}
			}

			function validateForm() {
				// Add your validation logic here
				return true; // Return true if the form is valid, false otherwise
			}

			const operationRadioButtons = document.querySelectorAll(
				'input[name="operation"]'
			);
			operationRadioButtons.forEach((radio) => {
				radio.addEventListener("change", () => {
					if (radio.value === "new") {
						newOperationFields.style.display = "block";
						addRemoveOperationFields.style.display = "none";
					} else {
						newOperationFields.style.display = "none";
						addRemoveOperationFields.style.display = "block";
					}
				});
			});

			// Function to fetch and populate existing item names in the dropdown
			async function fetchAndPopulateItemNames() {
				try {
					const category = categorySelector.querySelector(
						'input[name="category"]:checked'
					).value;
					const response = await fetch(`/api/items?category=${category}`);

					if (!response.ok) {
						throw new Error(`HTTP error! Status: ${response.status}`);
					}

					const data = await response.json();

					// Log fetched data
					console.log("Fetched Data:", data);

					// Clear existing options
					existingItemNameDropdown.innerHTML =
						'<option value="">Select Item</option>';

					// Populate dropdown with fetched item names
					data.itemNames.forEach((itemName) => {
						const option = document.createElement("option");
						option.value = itemName;
						option.textContent = itemName;
						existingItemNameDropdown.appendChild(option);
					});
				} catch (error) {
					console.error("Error fetching and populating item names:", error);
				}
			}

			// Call the function initially and whenever the category changes
			fetchAndPopulateItemNames();
			categorySelector.addEventListener("change", fetchAndPopulateItemNames);
		</script>
	</body>
</html>
