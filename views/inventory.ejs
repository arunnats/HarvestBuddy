<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Content</title>
		<link rel="stylesheet" href="../css/loginsignupForm.css" />
		<link rel="stylesheet" href="../css/button.css" />
		<link rel="stylesheet" href="../css/inventory.css" />
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap"
			rel="stylesheet"
		/>
		<style>
			.main {
				display: flex;
				justify-content: center;
				align-items: center;
			}
		</style>
	</head>
	<body>
		<div class="radio-wrapper" id="categorySelector">
			<div class="radio-option">
				<input
					class="radio-input"
					type="radio"
					name="category"
					value="fuel"
					checked
				/>
				<div class="radio-btn">
					<span class="radio-span">Fuel</span>
				</div>
			</div>
			<div class="radio-option">
				<input class="radio-input" type="radio" name="category" value="seeds" />
				<div class="radio-btn">
					<span class="radio-span">Seeds</span>
				</div>
			</div>
			<div class="radio-option">
				<input
					class="radio-input"
					type="radio"
					name="category"
					value="fertilizer"
				/>
				<div class="radio-btn">
					<span class="radio-span">Fertilizer</span>
				</div>
			</div>
			<div class="radio-option">
				<input
					class="radio-input"
					type="radio"
					name="category"
					value="pesticide"
				/>
				<div class="radio-btn">
					<span class="radio-span">Pesticide</span>
				</div>
			</div>
			<div class="radio-option">
				<input class="radio-input" type="radio" name="category" value="tool" />
				<div class="radio-btn">
					<span class="radio-span">Tool</span>
				</div>
			</div>
		</div>

		<form id="addUpdateForm" class="form" action="/inventory" method="post">
			<div class="title noto-sans-title">
				<span id="formTitle">Create an Item</span>
			</div>

			<div class="title noto-sans-title">
				<span>Operation:</span>
				<div class="radio-wrapper">
					<div class="radio-option">
						<input
							class="radio-input"
							type="radio"
							name="operation"
							value="new"
							checked=""
						/>
						<div class="radio-btn">
							<span class="radio-span">New</span>
						</div>
					</div>
					<div class="radio-option">
						<input
							class="radio-input"
							type="radio"
							name="operation"
							value="add"
						/>
						<div class="radio-btn">
							<span class="radio-span">Add</span>
						</div>
					</div>
					<div class="radio-option">
						<input
							class="radio-input"
							type="radio"
							name="operation"
							value="subtract"
						/>
						<div class="radio-btn">
							<span class="radio-span">Subtract</span>
						</div>
					</div>
				</div>
			</div>

			<div id="newOperationFields">
				<input
					type="text"
					placeholder="New Item Name"
					name="newItemName"
					class="input noto-sans-title"
				/>
				<input
					type="text"
					placeholder="Initial Quantity"
					name="initialQuantity"
					class="input noto-sans-title"
				/>
			</div>

			<div id="addRemoveOperationFields">
				<select name="existingItemName" class="input noto-sans-title">
					<!-- Options will be dynamically populated here -->
				</select>
				<input
					type="text"
					placeholder="Quantity"
					name="modifyQuantity"
					class="input noto-sans-title"
				/>
			</div>

			<button type="submit" class="button-confirm noto-sans-title">
				Submit
			</button>
		</form>
		<br />
		<div class="form">
			<h2>Current Resources</h2>
			<% Object.keys(user.inventory).forEach(category => { %>
			<h3><%= category.charAt(0).toUpperCase() + category.slice(1) %></h3>
			<% user.inventory[category].forEach(item => { %>
			<p>Name: <%= item.name %>, Quantity: <%= item.quantity %></p>
			<% }); %> <% }); %>
		</div>
		<script>
			const categorySelector = document.getElementById("categorySelector");
			const addUpdateForm = document.getElementById("addUpdateForm");
			const formTitle = document.getElementById("formTitle");
			const newOperationFields = document.getElementById("newOperationFields");
			const addRemoveOperationFields = document.getElementById(
				"addRemoveOperationFields"
			);
			const existingItemNameDropdown = document.querySelector(
				'select[name="existingItemName"]'
			);

			//console.log("test");
			//console.log("existingItemNameDropdown");

			// Initially hide the input fields
			newOperationFields.style.display = "none";
			addRemoveOperationFields.style.display = "none";

			categorySelector.addEventListener("change", (event) => {
				const selectedCategory = event.target.value;
				formTitle.textContent = `Create ${
					selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1)
				} Item`;
			});

			addUpdateForm.addEventListener("submit", async (event) => {
				event.preventDefault();

				// Check if the form is valid (add validation logic if needed)
				const isValid = validateForm();
				if (!isValid) {
					return;
				}

				// Fetch and populate existing item names in the dropdown
				if (!existingItemNameDropdown.options.length) {
					await fetchAndPopulateItemNames();
				}

				// Collect form data
				const formData = {
					category: categorySelector.querySelector(
						'input[name="category"]:checked'
					).value,
					operation: document.querySelector('input[name="operation"]:checked')
						.value,
					newItemName: document.querySelector('input[name="newItemName"]')
						.value,
					initialQuantity: document.querySelector(
						'input[name="initialQuantity"]'
					).value,
					existingItemName: existingItemNameDropdown.selectedOptions[0].value,
					modifyQuantity: document.querySelector('input[name="modifyQuantity"]')
						.value,
				};

				// Log the selected item name and other form data
				console.log("Selected item name:", formData.existingItemName);
				console.log("Form data:", formData);

				// Add your logic to handle form submission via Fetch API
				await submitForm(formData);

				// Clear the form fields after submission
				addUpdateForm.reset();
			});

			// Function to handle form submission via Fetch API
			async function submitForm(formData) {
				try {
					// Log the JSON data before sending
					console.log("JSON Data to be Sent:", JSON.stringify(formData));

					const response = await fetch("/inventory", {
						method: "POST",
						headers: {
							"Content-Type": "application/json",
						},
						body: JSON.stringify(formData),
					});

					if (!response.ok) {
						throw new Error(`HTTP error! Status: ${response.status}`);
					}

					const responseData = await response.json();
					console.log("Server Response:", responseData);
					location.reload();
				} catch (error) {
					console.error("Error submitting form:", error);
				}
			}

			function validateForm() {
				// Add your validation logic here
				return true; // Return true if the form is valid, false otherwise
			}

			const operationRadioButtons = document.querySelectorAll(
				'input[name="operation"]'
			);
			operationRadioButtons.forEach((radio) => {
				radio.addEventListener("change", () => {
					if (radio.value === "new") {
						newOperationFields.style.display = "block";
						addRemoveOperationFields.style.display = "none";
					} else {
						newOperationFields.style.display = "none";
						addRemoveOperationFields.style.display = "block";
					}
				});
			});

			// Function to fetch and populate existing item names in the dropdown
			async function fetchAndPopulateItemNames() {
				try {
					const category = categorySelector.querySelector(
						'input[name="category"]:checked'
					).value;
					const response = await fetch(`/api/items?category=${category}`);

					if (!response.ok) {
						throw new Error(`HTTP error! Status: ${response.status}`);
					}

					const data = await response.json();

					// Log fetched data
					console.log("Fetched Data:", data);

					// Clear existing options
					existingItemNameDropdown.innerHTML =
						'<option value="">Select Item</option>';

					// Populate dropdown with fetched item names
					data.itemNames.forEach((itemName) => {
						const option = document.createElement("option");
						option.value = itemName;
						option.textContent = itemName;
						existingItemNameDropdown.appendChild(option);
					});
				} catch (error) {
					console.error("Error fetching and populating item names:", error);
				}
			}

			// Call the function initially and whenever the category changes
			fetchAndPopulateItemNames();
			categorySelector.addEventListener("change", fetchAndPopulateItemNames);
		</script>
	</body>
</html>
